name: PowerShell Module Tests

on:
  pull_request:
    paths:
      - 'scripts/terraform/**'
      - '!scripts/terraform/logs/**'
      - '!scripts/terraform/staging/**'
  push:
    paths:
      - 'scripts/terraform/**'
      - '!scripts/terraform/logs/**'
      - '!scripts/terraform/staging/**'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run PowerShell Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify PowerShell is available
      shell: pwsh
      run: |
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        Write-Host "Platform: $($PSVersionTable.Platform)"

    - name: Install Pester
      shell: pwsh
      run: |
        Write-Host "Installing Pester module..."
        Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
        Write-Host "Pester version: $((Get-Module Pester -ListAvailable).Version)"

    - name: Validate Test Environment
      shell: pwsh
      working-directory: scripts/terraform/tests
      run: |
        Write-Host "Validating test environment..."
        .\Validate-TestEnvironment.ps1

    - name: Run All Tests
      shell: pwsh
      working-directory: scripts/terraform/tests
      run: |
        Write-Host "Running all tests..."
        .\Run-Tests.ps1

    - name: Run Convert-PackageName Tests
      shell: pwsh
      working-directory: scripts/terraform/tests
      run: |
        Write-Host "Running Convert-PackageName specific tests..."
        .\Run-Tests.ps1 -TestName "Convert-PackageName.Tests.ps1"

    - name: Run Tests with Code Coverage
      shell: pwsh
      working-directory: scripts/terraform/tests
      run: |
        Write-Host "Running tests with code coverage..."
        .\Run-Tests.ps1 -CodeCoverage $true

    - name: Run CI Tests with JUnit Output
      shell: pwsh
      working-directory: scripts/terraform/tests
      run: |
        Write-Host "Running CI tests with JUnit output..."
        .\Run-Tests.ps1 -CI $true -OutputFormat "JUnitXml"

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          scripts/terraform/tests/TestResults.junit.xml
          scripts/terraform/tests/CodeCoverage.xml
        retention-days: 2

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: PowerShell Tests
        path: scripts/terraform/tests/TestResults.junit.xml
        reporter: java-junit
        fail-on-error: true

    - name: Upload Code Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: scripts/terraform/tests/CodeCoverage.xml
        flags: powershell
        name: PowerShell Module Coverage
        fail_ci_if_error: false

    - name: Comment PR with Test Results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Try to read test results
          let testSummary = "## üß™ PowerShell Test Results\n\n";

          try {
            // Check if test results file exists
            const testResultsPath = 'scripts/terraform/tests/TestResults.junit.xml';
            if (fs.existsSync(testResultsPath)) {
              testSummary += "‚úÖ Test results generated successfully\n";
            } else {
              testSummary += "‚ùå Test results file not found\n";
            }

            // Check if code coverage file exists
            const coveragePath = 'scripts/terraform/tests/CodeCoverage.xml';
            if (fs.existsSync(coveragePath)) {
              testSummary += "üìä Code coverage report generated\n";
            }

            testSummary += "\n### Test Commands Executed:\n";
            testSummary += "- ‚úÖ All tests\n";
            testSummary += "- ‚úÖ Convert-PackageName specific tests\n";
            testSummary += "- ‚úÖ Tests with code coverage\n";
            testSummary += "- ‚úÖ CI tests with JUnit output\n";

          } catch (error) {
            testSummary += `‚ùå Error reading test results: ${error.message}\n`;
          }

          // Post comment to PR
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  test-windows:
    runs-on: windows-latest
    name: Run PowerShell Tests (Windows)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Pester
      shell: pwsh
      run: |
        Write-Host "Installing Pester module..."
        Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
        Write-Host "Pester version: $((Get-Module Pester -ListAvailable).Version)"

    - name: Run All Tests (Windows)
      shell: pwsh
      working-directory: scripts/terraform/tests
      run: |
        Write-Host "Running all tests on Windows..."
        .\Run-Tests.ps1 -CI $true -OutputFormat "JUnitXml"

    - name: Upload Windows Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: |
          scripts/terraform/tests/TestResults.junit.xml
          scripts/terraform/tests/CodeCoverage.xml
        retention-days: 30